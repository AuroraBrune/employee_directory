{"version":3,"sources":["components/EmployeesTable/index.js","components/Search/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeesTable","props","data","className","title","columns","name","selector","hidden","sortable","Search","textInput","React","createRef","type","placeholder","ref","onClick","searchText","current","value","Wrapper","useState","Data","tableData","setTableData","text","filterData","filter","o","last_name","includes","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wpDAmDeA,G,MA9CQ,SAACC,GAEpB,IAAMC,EAAOD,EAAMC,KAkCf,OACI,kBAAC,IAAD,CAAWC,UAAU,QACjBC,MAAM,YACNC,QApCI,CACZ,CACIC,KAAM,KACNC,SAAU,KACVC,QAAQ,GAEZ,CACIF,KAAM,aACNC,SAAU,aACVE,UAAU,GAEd,CACIH,KAAM,YACNC,SAAU,YACVE,UAAU,GAEd,CACIH,KAAM,QACNC,SAAU,QACVE,UAAU,GAEd,CACIH,KAAM,aACNC,SAAU,aACVE,UAAU,GAEd,CACIH,KAAM,WACNC,SAAU,WACVE,UAAU,IAQNP,KAAMA,MCpBPQ,MAvBf,SAAgBT,GACZ,IAAIU,EAAYC,IAAMC,YAOtB,OACI,yBAAKV,UAAU,aACX,0BAAMA,UAAU,eACZ,2BACIA,UAAU,eACVW,KAAK,OACLC,YAAY,mBACZC,IAAKL,IAET,4BAAQM,QAdC,WACjB,IAAMC,EAAaP,EAAUQ,QAAQC,MACrCnB,EAAMgB,QAAQC,KAYN,a,QCSDG,MAtBf,WAAoB,IAAD,EACiBC,mBAASC,GAD1B,mBACVC,EADU,KACCC,EADD,KAYjB,OACE,6BACE,yBAAKtB,UAAU,WACb,kBAAC,EAAD,CAAQc,QAZE,SAACS,GAEf,IAAMC,EAAaH,EAAUI,QAAO,SAAAC,GAClC,OAAOA,EAAEC,UAAUC,SAASL,MAE9BD,EAAaE,GACbK,QAAQC,IAAI,wBAOR,kBAAC,EAAD,CAAgB/B,KAAMsB,OCRfU,EATH,WAEZ,OACM,6BACE,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.cef6bf0a.chunk.js","sourcesContent":["import React from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport \"../../styles/style.css\";\r\n\r\n\r\nconst EmployeesTable = (props) => {\r\n\r\n    const data = props.data;\r\n    const columns = [\r\n        {\r\n            name: 'Id',\r\n            selector: 'id',\r\n            hidden: true,\r\n        },\r\n        {\r\n            name: 'First Name',\r\n            selector: 'first_name',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Last Name',\r\n            selector: 'last_name',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Email',\r\n            selector: 'email',\r\n            sortable: false,\r\n        },\r\n        {\r\n            name: 'Occupation',\r\n            selector: 'occupation',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Location',\r\n            selector: 'location',\r\n            sortable: true,\r\n        }\r\n    ]\r\n\r\n        return (\r\n            <DataTable className=\"table\"\r\n                title=\"Employees\"\r\n                columns={columns}\r\n                data={data}\r\n            />\r\n        )\r\n    \r\n};\r\n\r\nexport default EmployeesTable;","import React from 'react';\r\n\r\nfunction Search(props) {\r\n    let textInput = React.createRef();\r\n\r\n    const handleSubmit = () => {\r\n        const searchText = textInput.current.value;\r\n        props.onClick(searchText);\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchBox\">\r\n            <form className=\"form-inline\">\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search Last Name\"\r\n                    ref={textInput}\r\n                />\r\n                <button onClick={handleSubmit}>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport EmployeesTable from \"../EmployeesTable/index\";\r\nimport Search from \"../Search/index\";\r\nimport Data from '../../employees.json';\r\n\r\nfunction Wrapper() {\r\n  const [tableData, setTableData] = useState(Data);\r\n\r\n  const onClick = (text) => {\r\n    //this is where I am triggering a filter\r\n    const filterData = tableData.filter(o => { \r\n      return o.last_name.includes(text)\r\n    });\r\n    setTableData(filterData);\r\n    console.log(\"afterSearchChange\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"wrapper\">\r\n        <Search onClick={onClick} />\r\n        <EmployeesTable data={tableData} />\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\n\n\nconst App = () => {\n\nreturn (\n      <div>\n        <Wrapper />\n      </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}